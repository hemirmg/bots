2022-04-29 18:13:19,757 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:19,776 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:19,777 - freqtrade.configuration.directory_operations - INFO - Created data directory: None
2022-04-29 18:13:19,778 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:19,778 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:19,797 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:19,797 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:19,797 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:19,961 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:19,961 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:19,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:19,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:19,966 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:19,989 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:19,992 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:19,992 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:25,483 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:25,483 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:25,502 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:25,502 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:25,503 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:25,519 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:25,520 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:25,520 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:25,575 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:25,578 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:25,579 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:25,584 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:25,608 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:25,611 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:25,611 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:31,316 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:31,337 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:31,337 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:31,338 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:31,356 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:31,356 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:31,357 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:31,416 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:31,416 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:31,416 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:31,421 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:31,445 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:31,447 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:31,447 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:36,988 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:36,988 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:36,988 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:37,008 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:37,009 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:37,009 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:37,028 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:37,029 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:37,029 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:37,087 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:37,087 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:37,092 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:37,092 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:37,092 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:37,116 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:37,118 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:37,118 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:42,442 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:42,442 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:42,442 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:42,460 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:42,461 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:42,461 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:42,480 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:42,480 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:42,481 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:42,536 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:42,540 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:42,563 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:42,566 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:42,566 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:48,138 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:48,139 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:48,156 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:48,157 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:48,157 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:48,178 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:48,178 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:48,178 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:48,230 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:48,232 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:48,232 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:48,235 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:48,257 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:48,260 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:48,260 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:55,503 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:55,503 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:55,503 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:55,525 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:55,526 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:55,526 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:55,546 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:55,546 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:55,546 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:55,600 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:55,604 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:55,627 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:55,629 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:55,630 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:06,070 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:06,090 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:06,091 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:06,091 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:06,112 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:06,112 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:06,112 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:06,168 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:06,168 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:06,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:06,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:06,173 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:06,196 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:06,199 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:06,199 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:23,087 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:23,103 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:23,104 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:23,104 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:23,124 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:23,124 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:23,124 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:23,177 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:23,181 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:23,204 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:23,206 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:23,206 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:52,869 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:52,888 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:52,889 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:52,889 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:52,906 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:52,907 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:52,907 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:52,962 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:52,962 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:52,962 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:52,967 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:52,967 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:52,990 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:52,993 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:52,993 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:15:48,305 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:15:48,323 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:15:48,324 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:15:48,325 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:15:48,344 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:15:48,344 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:15:48,344 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:15:48,399 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:15:48,399 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:15:48,399 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:15:48,404 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:15:48,426 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:15:48,428 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:15:48,428 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:23,074 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:23,095 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:23,095 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:23,096 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:23,115 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:23,115 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:23,115 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:23,168 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:23,170 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:23,170 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:23,173 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:23,196 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:23,198 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:23,198 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:28,310 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:28,330 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:28,331 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:28,332 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:28,351 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:28,351 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:28,352 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:28,408 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:28,408 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:28,408 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:28,413 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:28,413 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:28,436 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:28,439 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:28,439 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:33,446 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:33,446 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:33,446 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:33,466 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:33,467 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:33,467 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:33,488 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:33,489 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:33,489 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:33,542 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:33,544 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:33,544 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:33,547 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:33,569 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:33,572 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:33,572 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:38,616 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:38,616 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:38,633 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:38,634 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:38,635 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:38,653 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:38,653 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:38,654 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:38,708 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:38,709 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:38,709 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:38,709 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:38,709 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:38,712 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:38,735 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:38,738 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:38,738 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:43,708 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:43,726 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:43,727 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:43,728 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:43,747 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:43,747 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:43,747 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:43,800 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:43,800 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:43,805 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:43,805 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:43,805 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:43,827 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:43,829 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:43,830 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:49,384 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:49,384 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:49,403 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:49,404 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:49,405 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:49,425 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:49,425 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:49,426 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:49,482 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:49,484 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:49,484 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:49,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:49,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:49,487 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:49,511 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:49,514 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:49,514 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:56,679 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:56,680 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:56,680 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:56,700 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:56,701 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:56,701 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:56,720 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:56,721 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:56,721 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:56,774 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:56,775 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:56,775 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:56,775 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:56,775 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:56,778 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:56,800 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:56,803 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:56,803 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:32,066 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:32,066 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:32,066 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:32,084 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:32,085 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:32,085 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:32,105 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:32,105 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:32,106 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:32,157 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:32,157 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:32,157 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:32,158 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:32,158 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:32,158 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:32,161 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:32,184 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:32,186 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:32,186 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:37,264 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:37,265 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:37,265 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:37,284 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:37,284 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:37,285 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:37,303 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:37,304 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:37,304 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:37,356 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:37,356 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:37,356 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:37,357 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:37,357 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:37,357 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:37,357 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:37,360 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:37,382 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:37,385 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:37,385 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:42,470 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:42,470 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:42,470 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:42,490 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:42,491 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:42,491 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:42,509 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:42,510 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:42,510 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:42,564 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:42,564 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:42,569 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:42,592 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:42,594 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:42,594 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:48,388 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:48,388 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:48,388 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:48,405 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:48,406 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:48,407 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:48,422 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:48,423 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:48,423 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:48,476 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:48,476 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:48,481 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:48,481 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:48,481 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:48,504 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:48,507 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:48,507 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:53,663 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:53,679 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:53,680 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:53,680 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:53,697 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:53,698 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:53,698 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:53,749 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:53,749 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:53,749 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:53,750 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:53,750 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:53,754 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:53,776 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:53,779 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:53,779 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:59,388 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:59,389 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:59,389 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:59,410 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:59,411 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:59,411 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:59,430 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:59,430 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:59,430 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:59,483 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:59,483 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:59,483 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:59,484 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:59,484 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:59,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:59,487 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:59,510 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:59,513 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:59,513 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:27:50,413 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:27:50,414 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:27:50,414 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:27:50,430 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:27:50,431 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:27:50,431 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:27:50,449 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:27:50,449 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 18:27:50,450 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:27:50,501 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:27:50,501 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:27:50,506 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 18:27:50,525 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 18:27:50,539 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 18:27:52,115 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 18:27:53,053 - freqtrade.persistence.migrations - INFO - Running database migration for trades - backup: trades_bak0, orders_bak0
2022-04-29 18:27:54,029 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 18:27:54,030 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 18:27:54,588 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 18:27:54,713 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 18:27:55,508 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 18:27:55,508 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 18:27:56,145 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 18:27:56,166 - uvicorn.error - INFO - Started server process [1]
2022-04-29 18:27:56,167 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 18:27:56,167 - uvicorn.error - INFO - Application startup complete.
2022-04-29 18:27:56,168 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 18:27:56,180 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 18:27:56,264 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 18:27:56,265 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 18:27:57,001 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 18:27:57,002 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 18:27:57,323 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `5m`\n*Strategy:* `KeltnerRSI`"}
2022-04-29 18:27:57,643 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 18:28:06,213 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:29:06,261 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:30:07,280 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:31:07,327 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:32:07,380 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:32:25,005 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:32:25,023 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:32:25,024 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:32:25,025 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:32:25,043 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:32:25,044 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:32:25,096 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:32:25,096 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:32:25,101 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 18:32:25,121 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 18:32:25,136 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 18:32:27,623 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 18:32:27,671 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 18:32:27,671 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 18:32:28,217 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 18:32:28,339 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 18:32:29,178 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 18:32:29,179 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 18:32:29,843 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 18:32:29,862 - uvicorn.error - INFO - Started server process [1]
2022-04-29 18:32:29,862 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 18:32:29,863 - uvicorn.error - INFO - Application startup complete.
2022-04-29 18:32:29,863 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 18:32:29,941 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 18:32:30,033 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 18:32:30,034 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 18:32:30,740 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 18:32:30,741 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 18:32:31,070 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSI`"}
2022-04-29 18:32:31,408 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 18:32:39,950 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:33:40,001 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:34:40,048 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:35:40,095 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:14:04,909 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:04,909 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:04,909 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:04,909 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:04,909 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:04,910 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:04,927 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:04,928 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:04,928 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:04,947 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:04,948 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:04,948 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:04,948 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:04,948 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:04,948 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:04,967 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:04,968 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:10,200 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:10,200 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:10,200 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:10,201 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:10,201 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:10,201 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:10,223 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:10,223 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:10,224 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:10,240 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:10,241 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:10,241 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:10,241 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:10,241 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:10,241 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:10,262 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:10,262 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:16,433 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:16,434 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:16,434 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:16,434 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:16,434 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:16,434 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:16,451 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:16,451 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:16,452 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:16,469 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:16,470 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:16,470 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:16,470 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:16,470 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:16,470 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:16,491 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:16,492 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:21,872 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:21,872 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:21,872 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:21,872 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:21,872 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:21,872 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:21,891 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:21,891 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:21,892 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:21,910 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:21,910 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:21,910 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:21,910 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:21,911 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:21,911 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:21,930 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:21,931 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:27,153 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:27,154 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:27,154 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:27,154 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:27,154 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:27,154 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:27,168 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:27,168 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:27,169 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:27,185 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:27,185 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:27,185 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:27,185 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:27,185 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:27,185 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:27,205 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:27,205 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:32,811 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:32,811 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:32,811 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:32,811 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:32,811 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:32,811 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:32,831 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:32,832 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:32,833 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:32,851 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:32,851 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:32,851 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:32,851 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:32,851 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:32,851 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:32,872 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:32,872 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:40,012 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:40,012 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:40,012 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:40,012 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:40,013 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:40,013 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:40,029 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:40,030 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:40,030 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:40,050 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:40,050 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:40,050 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:40,051 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:40,051 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:40,051 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:40,070 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:40,071 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:50,605 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:14:50,605 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:14:50,606 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:14:50,606 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:14:50,606 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:14:50,606 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:14:50,622 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:14:50,623 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:14:50,623 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:14:50,640 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:14:50,640 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:14:50,640 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:14:50,640 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:14:50,640 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:14:50,640 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:14:50,659 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:14:50,660 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:15:07,489 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:15:07,489 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:15:07,489 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:15:07,489 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:15:07,490 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:15:07,490 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:15:07,509 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:15:07,510 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:15:07,510 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:15:07,529 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:15:07,530 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:15:07,530 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:15:07,530 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:15:07,530 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:15:07,530 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:15:07,551 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:15:07,551 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:15:37,214 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:15:37,214 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:15:37,214 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:15:37,214 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:15:37,214 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:15:37,214 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:15:37,228 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:15:37,229 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:15:37,229 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:15:37,244 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:15:37,245 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:15:37,245 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:15:37,245 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:15:37,245 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:15:37,245 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:15:37,264 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:15:37,264 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSI'. This class does not exist or contains Python code errors.
2022-04-29 19:16:10,225 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:16:10,226 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:16:10,226 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:16:10,226 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:16:10,226 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:16:10,226 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:16:10,240 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:16:10,241 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:16:10,241 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:16:10,257 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:16:10,257 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:16:10,258 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:16:10,258 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:16:10,258 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:16:10,258 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:16:10,278 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SmaRSIdos from '/freqtrade/user_data/strategies/SmaRSIdos.py'...
2022-04-29 19:16:10,278 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 19:16:10,278 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 19:16:10,279 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 67
2022-04-29 19:16:10,279 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sma = 22
2022-04-29 19:16:10,279 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 19:16:10,279 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_sell_hline = 85
2022-04-29 19:16:10,279 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 19:16:10,280 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 19:16:10,281 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 19:16:10,282 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 19:16:10,283 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 19:16:10,283 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 19:16:10,283 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 19:16:10,283 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 19:16:10,283 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 19:16:10,288 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 19:16:10,288 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 19:16:10,288 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 19:16:10,303 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 19:16:10,316 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 19:16:13,242 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 19:16:13,285 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 19:16:13,286 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 19:16:13,835 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 19:16:13,963 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 19:16:14,927 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 19:16:14,928 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 19:16:15,536 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 19:16:15,536 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 19:16:15,536 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 19:16:15,536 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 19:16:15,558 - uvicorn.error - INFO - Started server process [1]
2022-04-29 19:16:15,559 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 19:16:15,559 - uvicorn.error - INFO - Application startup complete.
2022-04-29 19:16:15,559 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 19:16:15,569 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 19:16:15,652 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 19:16:15,652 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:16:16,356 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 19:16:16,357 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:16:16,676 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `SmaRSIdos`"}
2022-04-29 19:16:17,000 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:16:20,572 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:20,573 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:25,607 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:16:27,243 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:27,243 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:34,034 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:34,035 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:47,291 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:47,291 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:54,951 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:54,952 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:05,244 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:05,245 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:25,660 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:17:30,426 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:30,427 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:01,523 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:01,524 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:25,718 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:18:42,429 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:42,430 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:48,332 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:48,333 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:17,263 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:17,263 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:22,290 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:22,291 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:25,768 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:19:51,678 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:51,678 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:56,476 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:56,476 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:25,815 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:20:26,089 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:26,090 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:30,482 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:30,482 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:00,505 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:00,505 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:05,476 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:05,477 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:25,863 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:21:34,828 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:34,829 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:40,489 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:40,489 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:08,153 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:08,153 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:15,407 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:15,408 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:21,384 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:21,385 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:25,916 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:22:28,539 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:28,539 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:37,548 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:37,548 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:42,317 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:42,318 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:47,722 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:47,723 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:50,813 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:50,814 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:56,611 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:56,612 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:03,772 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:03,772 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:09,391 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:09,392 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:18,799 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:18,799 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:25,975 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:23:31,895 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:31,895 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:48,040 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:48,041 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:08,521 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:08,521 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:26,025 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:24:49,308 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:49,309 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:55,575 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:55,575 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:59,035 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:59,036 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:26,080 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:25:30,465 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:30,465 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:35,203 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:35,204 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:04,856 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:04,856 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:10,118 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:10,118 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:26,130 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:26:38,106 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:38,107 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:45,027 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:45,028 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:12,544 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:12,544 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:19,939 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:19,940 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:26,178 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:27:45,729 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:45,729 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:49,964 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:49,964 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:54,868 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:54,869 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:20,168 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:20,168 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:24,857 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:24,857 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:26,233 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:28:30,523 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:30,524 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:54,583 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:54,584 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:59,779 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:59,779 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:06,176 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:06,176 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:26,279 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:29:28,977 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:28,977 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:34,741 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:34,742 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:41,837 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:41,838 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:03,383 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:03,384 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:17,503 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:17,504 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:26,327 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:30:36,859 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:36,859 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:52,979 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:52,979 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:10,418 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:10,418 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:26,371 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:31:26,372 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'stopped'}
2022-04-29 19:31:26,723 - freqtrade.worker - INFO - Changing state from RUNNING to: STOPPED
2022-04-29 19:31:31,731 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:31:34,776 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:34,777 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:15,376 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:15,376 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:31,788 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:32:58,206 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:58,207 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:31,839 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:33:32,634 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:32,634 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:07,057 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:07,058 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:31,889 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:34:40,860 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:40,860 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:20,240 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:20,240 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:31,939 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:35:55,983 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:55,984 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:31,801 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:31,802 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:31,988 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:37:05,917 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:37:05,917 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:37:32,032 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:37:39,911 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:37:39,912 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:14,059 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:14,060 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:32,083 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:38:48,072 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:48,072 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:22,191 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:22,192 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:32,139 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:39:56,614 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:56,614 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:30,286 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:30,287 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:32,191 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:41:04,770 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:41:04,770 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:41:32,236 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:41:38,394 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:41:38,394 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:13,298 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:13,298 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:32,283 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:42:47,093 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:47,093 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:21,864 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:21,864 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:32,332 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:43:55,175 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:55,176 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:30,075 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:30,076 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:32,375 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:45:04,978 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:45:04,979 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:45:32,419 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:45:39,864 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:45:39,865 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:14,757 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:14,758 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:32,473 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:46:49,651 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:49,652 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:52,487 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:46:52,817 - freqtrade.worker - INFO - Changing state from STOPPED to: RUNNING
2022-04-29 19:46:52,817 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:46:53,116 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `SmaRSIdos`"}
2022-04-29 19:46:53,463 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:46:59,339 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:47:24,560 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:24,568 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:59,379 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:47:59,499 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:59,504 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:49:25,152 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:49:25,152 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:49:25,152 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:49:25,152 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:49:25,152 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:49:25,153 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:49:25,171 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:49:25,172 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:49:25,172 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:49:25,190 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:49:25,190 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:49:25,191 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:49:25,191 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:49:25,191 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:49:25,191 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:49:25,210 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SmaRSIdos from '/freqtrade/user_data/strategies/SmaRSIdos.py'...
2022-04-29 19:49:25,211 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 19:49:25,211 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 19:49:25,211 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 67
2022-04-29 19:49:25,211 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sma = 22
2022-04-29 19:49:25,211 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 19:49:25,212 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_sell_hline = 85
2022-04-29 19:49:25,212 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 19:49:25,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 19:49:25,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 19:49:25,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 19:49:25,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 19:49:25,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 19:49:25,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 19:49:25,215 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 19:49:25,215 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 19:49:25,220 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 19:49:25,220 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 19:49:25,220 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 19:49:25,234 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 19:49:25,247 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 19:49:26,990 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 19:49:27,030 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 19:49:27,031 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 19:49:27,519 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 19:49:28,210 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 19:49:30,693 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 19:49:30,693 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 19:49:31,351 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 19:49:31,351 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 19:49:31,351 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 19:49:31,352 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 19:49:31,369 - uvicorn.error - INFO - Started server process [1]
2022-04-29 19:49:31,370 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 19:49:31,370 - uvicorn.error - INFO - Application startup complete.
2022-04-29 19:49:31,371 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 19:49:31,379 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 19:49:31,463 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 19:49:31,464 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:49:32,241 - freqtrade.rpc.telegram - WARNING - Telegram NetworkError: Chat not found! Trying one more time.
2022-04-29 19:49:32,658 - freqtrade.rpc.telegram - WARNING - TelegramError: Chat not found! Giving up on that message.
2022-04-29 19:49:32,658 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 19:49:32,659 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:49:33,084 - freqtrade.rpc.telegram - WARNING - Telegram NetworkError: Chat not found! Trying one more time.
2022-04-29 19:49:33,517 - freqtrade.rpc.telegram - WARNING - TelegramError: Chat not found! Giving up on that message.
2022-04-29 19:49:33,517 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `SmaRSIdos`"}
2022-04-29 19:49:33,937 - freqtrade.rpc.telegram - WARNING - Telegram NetworkError: Chat not found! Trying one more time.
2022-04-29 19:49:34,360 - freqtrade.rpc.telegram - WARNING - TelegramError: Chat not found! Giving up on that message.
2022-04-29 19:49:34,361 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:49:34,837 - freqtrade.rpc.telegram - WARNING - Telegram NetworkError: Chat not found! Trying one more time.
2022-04-29 19:49:35,255 - freqtrade.rpc.telegram - WARNING - TelegramError: Chat not found! Giving up on that message.
2022-04-29 19:49:43,913 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:50:43,959 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:51:44,008 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:52:44,060 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:53:44,112 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:54:44,168 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:55:44,218 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:56:44,275 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:57:44,327 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:58:44,376 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:59:44,423 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:00:44,476 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:01:44,531 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:02:44,586 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:03:44,639 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:04:44,686 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:05:44,745 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:06:44,798 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:07:44,856 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:08:44,912 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:09:44,957 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:10:45,000 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:11:45,051 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:12:45,096 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:13:45,144 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:14:45,200 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:15:45,253 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:16:45,305 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:17:45,364 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:18:45,419 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:19:45,473 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:20:45,527 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:21:45,575 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:22:45,619 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:23:45,669 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:26:30,405 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 20:26:30,442 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 20:26:30,442 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 20:26:30,442 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 20:26:30,442 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 20:26:30,443 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 20:26:32,859 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 20:26:32,860 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 20:26:32,860 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 20:26:32,876 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 20:26:32,877 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 20:26:32,877 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 20:26:32,877 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 20:26:32,877 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 20:26:32,877 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 20:26:33,659 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SmaRSIdos from '/freqtrade/user_data/strategies/SmaRSIdos.py'...
2022-04-29 20:26:33,660 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 20:26:33,660 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 20:26:33,660 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 67
2022-04-29 20:26:33,660 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sma = 22
2022-04-29 20:26:33,660 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 20:26:33,661 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_sell_hline = 85
2022-04-29 20:26:33,661 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 20:26:33,661 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 20:26:33,661 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 20:26:33,661 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 20:26:33,662 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 20:26:33,663 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 20:26:33,664 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 20:26:33,664 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 20:26:33,689 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 20:26:33,689 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 20:26:33,689 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 20:26:33,703 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 20:26:33,717 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 20:26:36,632 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 20:26:37,628 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 20:26:37,628 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 20:26:38,244 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 20:26:46,338 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 20:26:47,112 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 20:26:47,112 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 20:27:04,420 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 20:27:04,421 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 20:27:04,421 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 20:27:04,421 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 20:27:05,136 - uvicorn.error - INFO - Started server process [1]
2022-04-29 20:27:05,136 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 20:27:05,137 - uvicorn.error - INFO - Application startup complete.
2022-04-29 20:27:05,137 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 20:27:05,254 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 20:27:05,358 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 20:27:05,359 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 20:27:06,040 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 20:27:06,041 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 20:27:06,367 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `SmaRSIdos`"}
2022-04-29 20:27:06,683 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 20:27:15,058 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:28:15,107 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:29:15,151 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:30:15,199 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:31:15,247 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:32:15,296 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:33:15,352 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:34:15,399 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:35:15,451 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:36:15,503 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:37:15,556 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:38:15,604 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:39:15,660 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:42:22,286 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 20:42:22,336 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 20:42:22,336 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 20:42:22,336 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 20:42:22,336 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 20:42:22,336 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 20:42:23,765 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 20:42:23,766 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 20:42:23,767 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 20:42:23,785 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 20:42:23,785 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 20:42:23,785 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 20:42:23,786 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 20:42:23,786 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 20:42:23,786 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 20:42:24,209 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SmaRSIdos from '/freqtrade/user_data/strategies/SmaRSIdos.py'...
2022-04-29 20:42:24,209 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 20:42:24,209 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 20:42:24,210 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 67
2022-04-29 20:42:24,210 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sma = 22
2022-04-29 20:42:24,210 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 20:42:24,210 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_sell_hline = 85
2022-04-29 20:42:24,210 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 20:42:24,211 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 20:42:24,211 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 20:42:24,211 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 20:42:24,211 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 20:42:24,211 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 20:42:24,212 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 20:42:24,213 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 20:42:24,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 20:42:24,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 20:42:24,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 20:42:24,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 20:42:24,214 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 20:42:24,214 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 20:42:24,238 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 20:42:24,239 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 20:42:24,240 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 20:42:24,254 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 20:42:24,268 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 20:42:27,062 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 20:42:27,180 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 20:42:27,180 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 20:42:27,685 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 20:42:30,013 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 20:42:30,800 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 20:42:30,800 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 20:42:34,640 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 20:42:34,640 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 20:42:34,641 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 20:42:34,641 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 20:42:34,916 - uvicorn.error - INFO - Started server process [1]
2022-04-29 20:42:34,917 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 20:42:34,917 - uvicorn.error - INFO - Application startup complete.
2022-04-29 20:42:34,918 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 20:42:34,973 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 20:42:35,067 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 20:42:35,067 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 20:42:35,747 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 20:42:35,748 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 20:42:36,060 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `SmaRSIdos`"}
2022-04-29 20:42:36,402 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 20:42:45,969 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:43:46,015 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:44:46,063 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:45:46,111 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:46:46,159 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:47:46,207 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:48:46,279 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:49:46,331 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:50:46,386 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:51:46,435 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:52:46,483 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:53:46,531 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:54:46,579 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:55:46,627 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:56:46,675 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:57:46,723 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:58:46,771 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:59:46,819 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:00:46,867 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:01:46,915 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:02:46,963 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:03:47,011 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:04:47,063 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:05:47,111 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:06:47,159 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:07:47,207 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:08:47,255 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:09:47,303 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:10:47,351 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:11:47,399 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:12:47,447 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:13:47,499 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:14:47,547 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:15:47,595 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:16:47,643 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:17:47,699 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:18:47,747 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:19:47,795 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:20:47,843 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:21:47,891 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:22:47,935 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:23:47,983 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:24:48,031 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:25:48,079 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:26:48,127 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:27:48,175 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:28:48,223 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:29:48,271 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:30:48,319 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:31:48,367 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:32:48,415 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:33:48,463 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
