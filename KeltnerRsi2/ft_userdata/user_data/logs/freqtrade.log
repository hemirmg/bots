2022-04-29 18:13:19,757 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:19,757 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:19,776 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:19,777 - freqtrade.configuration.directory_operations - INFO - Created data directory: None
2022-04-29 18:13:19,778 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:19,778 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:19,797 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:19,797 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:19,797 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:19,961 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:19,961 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:19,962 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:19,963 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:19,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:19,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:19,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:19,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:19,966 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:19,989 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:19,992 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:19,992 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:25,483 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:25,483 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:25,484 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:25,502 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:25,502 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:25,503 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:25,519 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:25,520 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:25,520 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:25,575 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:25,576 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:25,578 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:25,579 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:25,580 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:25,581 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:25,582 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:25,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:25,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:25,584 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:25,608 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:25,611 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:25,611 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:31,316 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:31,317 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:31,337 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:31,337 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:31,338 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:31,356 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:31,356 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:31,357 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:31,416 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:31,416 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:31,416 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:31,417 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:31,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:31,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:31,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:31,421 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:31,445 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:31,447 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:31,447 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:36,988 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:36,988 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:36,988 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:36,989 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:37,008 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:37,009 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:37,009 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:37,028 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:37,029 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:37,029 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:37,087 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:37,087 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:37,088 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:37,089 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:37,090 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:37,091 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:37,092 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:37,092 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:37,092 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:37,116 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:37,118 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:37,118 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:42,442 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:42,442 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:42,442 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:42,443 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:42,460 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:42,461 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:42,461 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:42,480 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:42,480 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:42,481 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:42,536 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:42,536 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:42,537 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:42,538 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:42,539 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:42,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:42,540 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:42,563 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:42,566 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:42,566 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:48,138 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:48,138 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:48,139 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:48,156 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:48,157 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:48,157 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:48,178 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:48,178 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:48,178 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:48,230 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:48,231 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:48,232 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:48,232 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:48,232 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:48,233 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:48,234 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:48,235 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:48,235 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:48,257 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:48,260 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:48,260 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:13:55,503 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:13:55,503 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:13:55,503 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:13:55,504 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:13:55,525 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:13:55,526 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:13:55,526 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:13:55,546 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:13:55,546 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:13:55,546 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:13:55,600 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:13:55,600 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:13:55,601 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:13:55,602 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:13:55,603 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:13:55,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:13:55,604 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:13:55,627 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:13:55,629 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:13:55,630 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:06,070 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:06,070 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:06,090 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:06,091 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:06,091 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:06,112 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:06,112 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:06,112 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:06,168 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:06,168 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:06,169 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:06,170 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:06,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:06,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:06,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:06,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:06,173 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:06,196 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:06,199 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:06,199 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:23,087 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:23,087 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:23,103 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:23,104 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:23,104 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:23,124 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:23,124 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:23,124 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:23,177 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:23,177 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:23,178 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:23,179 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:23,180 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:23,181 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:23,181 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:23,204 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:23,206 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:23,206 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:14:52,869 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:14:52,870 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:14:52,888 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:14:52,889 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:14:52,889 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:14:52,906 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:14:52,907 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:14:52,907 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:14:52,962 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:14:52,962 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:14:52,962 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:14:52,963 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:14:52,964 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:14:52,965 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:14:52,966 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:14:52,967 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:14:52,967 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:14:52,990 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotTryHemir',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotTryHemir',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:14:52,993 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:14:52,993 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:15:48,305 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:15:48,306 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:15:48,323 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:15:48,324 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:15:48,325 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:15:48,344 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:15:48,344 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:15:48,344 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:15:48,399 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:15:48,399 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:15:48,399 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:15:48,400 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:15:48,401 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:15:48,402 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:15:48,403 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:15:48,404 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:15:48,426 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:15:48,428 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:15:48,428 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:23,074 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:23,074 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:23,095 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:23,095 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:23,096 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:23,115 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:23,115 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:23,115 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:23,168 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:23,169 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:23,170 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:23,170 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:23,170 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:23,171 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:23,172 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:23,173 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:23,173 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:23,196 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:23,198 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:23,198 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:28,310 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:28,311 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:28,330 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:28,331 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:28,332 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:28,351 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:28,351 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:28,352 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:28,408 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:28,408 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:28,408 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:28,409 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:28,410 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:28,411 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:28,412 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:28,413 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:28,413 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:28,436 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:28,439 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:28,439 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:33,446 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:33,446 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:33,446 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:33,447 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:33,466 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:33,467 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:33,467 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:33,488 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:33,489 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:33,489 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:33,542 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:33,543 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:33,544 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:33,544 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:33,544 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:33,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:33,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:33,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:33,547 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:33,569 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:33,572 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:33,572 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:38,616 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:38,616 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:38,617 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:38,633 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:38,634 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:38,635 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:38,653 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:38,653 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:38,654 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:38,708 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:38,708 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:38,709 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:38,709 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:38,709 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:38,709 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:38,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:38,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:38,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:38,712 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:38,735 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:38,738 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:38,738 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:43,708 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:43,709 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:43,726 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:43,727 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:43,728 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:43,747 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:43,747 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:43,747 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:43,800 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:43,800 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:43,801 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:43,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:43,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:43,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:43,805 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:43,805 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:43,805 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:43,827 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:43,829 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:43,830 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:49,384 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:49,384 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:49,385 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:49,403 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:49,404 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:49,405 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:49,425 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:49,425 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:49,426 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:49,482 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:49,483 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:49,484 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:49,484 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:49,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:49,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:49,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:49,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:49,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:49,487 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:49,511 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:49,514 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:49,514 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:20:56,679 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:20:56,679 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:20:56,680 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:20:56,680 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:20:56,700 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:20:56,701 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:20:56,701 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:20:56,720 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:20:56,721 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:20:56,721 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:20:56,774 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy SampleStrategy from '/freqtrade/user_data/strategies/sample_strategy.py'...
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_rsi = 30
2022-04-29 18:20:56,774 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:20:56,775 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): sell_rsi = 70
2022-04-29 18:20:56,775 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:20:56,775 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:20:56,775 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'60': 0.01, '30': 0.02, '0': 0.04}
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:20:56,776 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'market', 'stoploss_on_exchange': False}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 30
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:20:56,777 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:20:56,778 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:20:56,778 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:20:56,800 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': ['http://localhost:8080'],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 0.04, '30': 0.02, '60': 0.01},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'market',
                     'stoploss_on_exchange': False},
     'original_config': {'api_server': {'CORS_origins': ['http://localhost:8080'],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 30,
     'stoploss': -0.1,
     'strategy': 'SampleStrategy',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:20:56,803 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:20:56,803 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:32,066 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:32,066 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:32,066 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:32,067 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:32,084 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:32,085 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:32,085 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:32,105 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:32,105 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:32,106 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:32,157 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:32,157 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:32,157 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:32,158 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:32,158 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:32,158 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:32,159 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:32,160 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:32,161 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:32,161 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:32,184 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:32,186 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:32,186 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:37,264 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:37,264 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:37,265 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:37,265 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:37,284 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:37,284 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:37,285 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:37,303 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:37,304 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:37,304 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:37,356 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:37,356 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:37,356 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:37,357 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:37,357 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:37,357 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:37,357 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:37,358 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:37,359 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:37,360 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:37,360 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:37,382 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:37,385 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:37,385 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:42,470 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:42,470 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:42,470 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:42,471 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:42,490 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:42,491 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:42,491 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:42,509 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:42,510 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:42,510 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:42,564 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:42,564 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:42,565 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:42,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:42,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:42,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:42,569 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:42,592 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:42,594 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:42,594 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:48,388 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:48,388 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:48,388 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:48,389 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:48,405 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:48,406 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:48,407 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:48,422 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:48,423 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:48,423 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:48,476 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:48,476 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:48,477 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:48,478 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:48,479 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:48,480 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:48,481 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:48,481 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:48,481 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:48,504 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:48,507 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:48,507 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:53,663 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:53,663 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:53,679 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:53,680 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:53,680 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:53,697 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:53,698 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:53,698 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:53,749 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:53,749 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:53,749 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:53,750 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:53,750 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:53,751 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:53,752 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:53,753 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:53,754 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:53,776 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:53,779 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:53,779 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:23:59,388 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:23:59,388 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:23:59,389 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:23:59,389 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:23:59,410 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:23:59,411 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:23:59,411 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:23:59,430 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:23:59,430 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:23:59,430 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:23:59,483 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:23:59,483 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:23:59,483 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:23:59,484 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:23:59,484 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:23:59,484 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:23:59,485 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:23:59,486 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:23:59,487 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:23:59,487 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:23:59,510 - freqtrade.configuration.config_validation - CRITICAL - Invalid configuration. Reason: 'bid_strategy' is a required property

Failed validating 'required' in schema:
    {'definitions': {'edge': {'properties': {'allowed_risk': {'type': 'number'},
                                             'calculate_since_number_of_days': {'type': 'integer'},
                                             'enabled': {'type': 'boolean'},
                                             'max_trade_duration_minute': {'type': 'integer'},
                                             'min_trade_number': {'type': 'number'},
                                             'minimum_expectancy': {'type': 'number'},
                                             'minimum_winrate': {'type': 'number'},
                                             'process_throttle_secs': {'minimum': 600,
                                                                       'type': 'integer'},
                                             'remove_pumps': {'type': 'boolean'},
                                             'stoploss_range_max': {'type': 'number'},
                                             'stoploss_range_min': {'type': 'number'},
                                             'stoploss_range_step': {'type': 'number'}},
                              'required': ['process_throttle_secs',
                                           'allowed_risk'],
                              'type': 'object'},
                     'exchange': {'properties': {'ccxt_async_config': {'type': 'object'},
                                                 'ccxt_config': {'type': 'object'},
                                                 'key': {'default': '',
                                                         'type': 'string'},
                                                 'markets_refresh_interval': {'type': 'integer'},
                                                 'name': {'type': 'string'},
                                                 'outdated_offset': {'minimum': 1,
                                                                     'type': 'integer'},
                                                 'pair_blacklist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'pair_whitelist': {'items': {'type': 'string'},
                                                                    'type': 'array',
                                                                    'uniqueItems': True},
                                                 'password': {'default': '',
                                                              'type': 'string'},
                                                 'sandbox': {'default': False,
                                                             'type': 'boolean'},
                                                 'secret': {'default': '',
                                                            'type': 'string'},
                                                 'uid': {'type': 'string'},
                                                 'unknown_fee_rate': {'type': 'number'}},
                                  'required': ['name'],
                                  'type': 'object'}},
     'properties': {'amend_last_stake_amount': {'default': False,
                                                'type': 'boolean'},
                    'amount_reserve_percent': {'maximum': 0.5,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'api_server': {'properties': {'CORS_origins': {'items': {'type': 'string'},
                                                                   'type': 'array'},
                                                  'enabled': {'type': 'boolean'},
                                                  'jwt_secret_key': {'type': 'string'},
                                                  'listen_ip_address': {'format': 'ipv4'},
                                                  'listen_port': {'maximum': 65535,
                                                                  'minimum': 1024,
                                                                  'type': 'integer'},
                                                  'password': {'type': 'string'},
                                                  'username': {'type': 'string'},
                                                  'verbosity': {'enum': ['error',
                                                                         'info'],
                                                                'type': 'string'}},
                                   'required': ['enabled',
                                                'listen_ip_address',
                                                'listen_port',
                                                'username',
                                                'password'],
                                   'type': 'object'},
                    'ask_strategy': {'properties': {'bid_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'ask',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'available_capital': {'minimum': 0, 'type': 'number'},
                    'backtest_breakdown': {'items': {'enum': ['day',
                                                              'week',
                                                              'month'],
                                                     'type': 'string'},
                                           'type': 'array'},
                    'bid_strategy': {'properties': {'ask_last_balance': {'exclusiveMaximum': False,
                                                                         'maximum': 1,
                                                                         'minimum': 0,
                                                                         'type': 'number'},
                                                    'check_depth_of_market': {'properties': {'bids_to_ask_delta': {'minimum': 0,
                                                                                                                   'type': 'number'},
                                                                                             'enabled': {'type': 'boolean'}},
                                                                              'type': 'object'},
                                                    'order_book_top': {'maximum': 50,
                                                                       'minimum': 1,
                                                                       'type': 'integer'},
                                                    'price_side': {'default': 'bid',
                                                                   'enum': ['ask',
                                                                            'bid'],
                                                                   'type': 'string'},
                                                    'use_order_book': {'type': 'boolean'}},
                                     'required': ['price_side'],
                                     'type': 'object'},
                    'bot_name': {'type': 'string'},
                    'cancel_open_orders_on_exit': {'default': False,
                                                   'type': 'boolean'},
                    'custom_price_max_distance_ratio': {'minimum': 0.0,
                                                        'type': 'number'},
                    'dataformat_ohlcv': {'default': 'json',
                                         'enum': ['json', 'jsongz', 'hdf5'],
                                         'type': 'string'},
                    'dataformat_trades': {'default': 'jsongz',
                                          'enum': ['json',
                                                   'jsongz',
                                                   'hdf5'],
                                          'type': 'string'},
                    'db_url': {'type': 'string'},
                    'disable_dataframe_checks': {'type': 'boolean'},
                    'disableparamexport': {'type': 'boolean'},
                    'dry_run': {'type': 'boolean'},
                    'dry_run_wallet': {'default': 1000, 'type': 'number'},
                    'edge': {'$ref': '#/definitions/edge'},
                    'exchange': {'$ref': '#/definitions/exchange'},
                    'experimental': {'properties': {'block_bad_exchanges': {'type': 'boolean'}},
                                     'type': 'object'},
                    'export': {'default': 'trades',
                               'enum': ['none', 'trades'],
                               'type': 'string'},
                    'fiat_display_currency': {'enum': ['AUD',
                                                       'BRL',
                                                       'CAD',
                                                       'CHF',
                                                       'CLP',
                                                       'CNY',
                                                       'CZK',
                                                       'DKK',
                                                       'EUR',
                                                       'GBP',
                                                       'HKD',
                                                       'HUF',
                                                       'IDR',
                                                       'ILS',
                                                       'INR',
                                                       'JPY',
                                                       'KRW',
                                                       'MXN',
                                                       'MYR',
                                                       'NOK',
                                                       'NZD',
                                                       'PHP',
                                                       'PKR',
                                                       'PLN',
                                                       'RUB',
                                                       'SEK',
                                                       'SGD',
                                                       'THB',
                                                       'TRY',
                                                       'TWD',
                                                       'ZAR',
                                                       'USD',
                                                       'BTC',
                                                       'ETH',
                                                       'XRP',
                                                       'LTC',
                                                       'BCH'],
                                              'type': 'string'},
                    'forcebuy_enable': {'type': 'boolean'},
                    'ignore_buying_expired_candle_after': {'type': 'number'},
                    'ignore_roi_if_buy_signal': {'type': 'boolean'},
                    'initial_state': {'enum': ['running', 'stopped'],
                                      'type': 'string'},
                    'internals': {'default': {},
                                  'properties': {'interval': {'type': 'integer'},
                                                 'process_throttle_secs': {'type': 'integer'},
                                                 'sd_notify': {'type': 'boolean'}},
                                  'type': 'object'},
                    'last_stake_amount_min_ratio': {'default': 0.5,
                                                    'maximum': 1.0,
                                                    'minimum': 0.0,
                                                    'type': 'number'},
                    'max_entry_position_adjustment': {'minimum': -1,
                                                      'type': ['integer',
                                                               'number']},
                    'max_open_trades': {'minimum': -1,
                                        'type': ['integer', 'number']},
                    'minimal_roi': {'minProperties': 1,
                                    'patternProperties': {'^[0-9.]+$': {'type': 'number'}},
                                    'type': 'object'},
                    'new_pairs_days': {'default': 30, 'type': 'integer'},
                    'order_time_in_force': {'properties': {'buy': {'enum': ['gtc',
                                                                            'fok',
                                                                            'ioc'],
                                                                   'type': 'string'},
                                                           'sell': {'enum': ['gtc',
                                                                             'fok',
                                                                             'ioc'],
                                                                    'type': 'string'}},
                                            'required': ['buy', 'sell'],
                                            'type': 'object'},
                    'order_types': {'properties': {'buy': {'enum': ['limit',
                                                                    'market'],
                                                           'type': 'string'},
                                                   'emergencysell': {'default': 'market',
                                                                     'enum': ['limit',
                                                                              'market'],
                                                                     'type': 'string'},
                                                   'forcebuy': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'forcesell': {'enum': ['limit',
                                                                          'market'],
                                                                 'type': 'string'},
                                                   'sell': {'enum': ['limit',
                                                                     'market'],
                                                            'type': 'string'},
                                                   'stoploss': {'enum': ['limit',
                                                                         'market'],
                                                                'type': 'string'},
                                                   'stoploss_on_exchange': {'type': 'boolean'},
                                                   'stoploss_on_exchange_interval': {'type': 'number'},
                                                   'stoploss_on_exchange_limit_ratio': {'maximum': 1.0,
                                                                                        'minimum': 0.0,
                                                                                        'type': 'number'}},
                                    'required': ['buy',
                                                 'sell',
                                                 'stoploss',
                                                 'stoploss_on_exchange'],
                                    'type': 'object'},
                    'pairlists': {'items': {'properties': {'method': {'enum': ['StaticPairList',
                                                                               'VolumePairList',
                                                                               'AgeFilter',
                                                                               'OffsetFilter',
                                                                               'PerformanceFilter',
                                                                               'PrecisionFilter',
                                                                               'PriceFilter',
                                                                               'RangeStabilityFilter',
                                                                               'ShuffleFilter',
                                                                               'SpreadFilter',
                                                                               'VolatilityFilter'],
                                                                      'type': 'string'}},
                                            'required': ['method'],
                                            'type': 'object'},
                                  'type': 'array'},
                    'position_adjustment_enable': {'type': 'boolean'},
                    'process_only_new_candles': {'type': 'boolean'},
                    'protections': {'items': {'properties': {'lookback_period': {'minimum': 1,
                                                                                 'type': 'number'},
                                                             'lookback_period_candles': {'minimum': 1,
                                                                                         'type': 'number'},
                                                             'method': {'enum': ['CooldownPeriod',
                                                                                 'LowProfitPairs',
                                                                                 'MaxDrawdown',
                                                                                 'StoplossGuard'],
                                                                        'type': 'string'},
                                                             'stop_duration': {'minimum': 0.0,
                                                                               'type': 'number'},
                                                             'stop_duration_candles': {'minimum': 0,
                                                                                       'type': 'number'},
                                                             'trade_limit': {'minimum': 1,
                                                                             'type': 'number'}},
                                              'required': ['method'],
                                              'type': 'object'},
                                    'type': 'array'},
                    'sell_profit_offset': {'type': 'number'},
                    'sell_profit_only': {'type': 'boolean'},
                    'stake_amount': {'minimum': 0.0001,
                                     'pattern': 'unlimited',
                                     'type': ['number', 'string']},
                    'stake_currency': {'type': 'string'},
                    'stoploss': {'exclusiveMaximum': True,
                                 'maximum': 0,
                                 'minimum': -1,
                                 'type': 'number'},
                    'telegram': {'properties': {'balance_dust_level': {'minimum': 0.0,
                                                                       'type': 'number'},
                                                'chat_id': {'type': 'string'},
                                                'enabled': {'type': 'boolean'},
                                                'notification_settings': {'default': {'buy_fill': 'off',
                                                                                      'protection_trigger': 'off',
                                                                                      'sell_fill': 'off'},
                                                                          'properties': {'buy': {'enum': ['on',
                                                                                                          'off',
                                                                                                          'silent'],
                                                                                                 'type': 'string'},
                                                                                         'buy_cancel': {'enum': ['on',
                                                                                                                 'off',
                                                                                                                 'silent'],
                                                                                                        'type': 'string'},
                                                                                         'buy_fill': {'default': 'off',
                                                                                                      'enum': ['on',
                                                                                                               'off',
                                                                                                               'silent'],
                                                                                                      'type': 'string'},
                                                                                         'protection_trigger': {'default': 'off',
                                                                                                                'enum': ['on',
                                                                                                                         'off',
                                                                                                                         'silent'],
                                                                                                                'type': 'string'},
                                                                                         'protection_trigger_global': {'enum': ['on',
                                                                                                                                'off',
                                                                                                                                'silent'],
                                                                                                                       'type': 'string'},
                                                                                         'sell': {'additionalProperties': {'enum': ['on',
                                                                                                                                    'off',
                                                                                                                                    'silent'],
                                                                                                                           'type': 'string'},
                                                                                                  'type': ['string',
                                                                                                           'object']},
                                                                                         'sell_cancel': {'enum': ['on',
                                                                                                                  'off',
                                                                                                                  'silent'],
                                                                                                         'type': 'string'},
                                                                                         'sell_fill': {'default': 'off',
                                                                                                       'enum': ['on',
                                                                                                                'off',
                                                                                                                'silent'],
                                                                                                       'type': 'string'},
                                                                                         'startup': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'},
                                                                                         'status': {'enum': ['on',
                                                                                                             'off',
                                                                                                             'silent'],
                                                                                                    'type': 'string'},
                                                                                         'warning': {'enum': ['on',
                                                                                                              'off',
                                                                                                              'silent'],
                                                                                                     'type': 'string'}},
                                                                          'type': 'object'},
                                                'reload': {'type': 'boolean'},
                                                'token': {'type': 'string'}},
                                 'required': ['enabled',
                                              'token',
                                              'chat_id'],
                                 'type': 'object'},
                    'timeframe': {'type': 'string'},
                    'tradable_balance_ratio': {'default': 0.99,
                                               'maximum': 1,
                                               'minimum': 0.0,
                                               'type': 'number'},
                    'trailing_only_offset_is_reached': {'type': 'boolean'},
                    'trailing_stop': {'type': 'boolean'},
                    'trailing_stop_positive': {'maximum': 1,
                                               'minimum': 0,
                                               'type': 'number'},
                    'trailing_stop_positive_offset': {'maximum': 1,
                                                      'minimum': 0,
                                                      'type': 'number'},
                    'unfilledtimeout': {'properties': {'buy': {'minimum': 1,
                                                               'type': 'number'},
                                                       'exit_timeout_count': {'default': 0,
                                                                              'minimum': 0,
                                                                              'type': 'number'},
                                                       'sell': {'minimum': 1,
                                                                'type': 'number'},
                                                       'unit': {'default': 'minutes',
                                                                'enum': ['minutes',
                                                                         'seconds'],
                                                                'type': 'string'}},
                                        'type': 'object'},
                    'use_sell_signal': {'type': 'boolean'},
                    'webhook': {'properties': {'enabled': {'type': 'boolean'},
                                               'format': {'default': 'form',
                                                          'enum': ['form',
                                                                   'json',
                                                                   'raw'],
                                                          'type': 'string'},
                                               'retries': {'minimum': 0,
                                                           'type': 'integer'},
                                               'retry_delay': {'minimum': 0,
                                                               'type': 'number'},
                                               'url': {'type': 'string'},
                                               'webhookbuy': {'type': 'object'},
                                               'webhookbuycancel': {'type': 'object'},
                                               'webhookbuyfill': {'type': 'object'},
                                               'webhooksell': {'type': 'object'},
                                               'webhooksellcancel': {'type': 'object'},
                                               'webhooksellfill': {'type': 'object'},
                                               'webhookstatus': {'type': 'object'}},
                                'type': 'object'}},
     'required': ['exchange',
                  'timeframe',
                  'max_open_trades',
                  'stake_currency',
                  'stake_amount',
                  'tradable_balance_ratio',
                  'last_stake_amount_min_ratio',
                  'dry_run',
                  'dry_run_wallet',
                  'ask_strategy',
                  'bid_strategy',
                  'stoploss',
                  'minimal_roi',
                  'internals',
                  'dataformat_ohlcv',
                  'dataformat_trades'],
     'type': 'object'}

On instance:
    {'amend_last_stake_amount': False,
     'api_server': {'CORS_origins': [],
                    'enabled': True,
                    'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                    'listen_ip_address': '0.0.0.0',
                    'listen_port': 8080,
                    'password': 'pass',
                    'username': 'user'},
     'ask_strategy': {'price_side': 'ask'},
     'bot_name': 'BotKeltnerRsi',
     'cancel_open_orders_on_exit': False,
     'config_files': ['/freqtrade/user_data/config.json'],
     'datadir': PosixPath('/freqtrade/user_data/data/binance'),
     'dataformat_ohlcv': 'json',
     'dataformat_trades': 'jsongz',
     'db_url': 'sqlite:////freqtrade/user_data/tradesv3.sqlite',
     'disable_dataframe_checks': False,
     'dry_run': True,
     'dry_run_wallet': 1000,
     'edge': {'allowed_risk': 0.01,
              'calculate_since_number_of_days': 7,
              'enabled': False,
              'max_trade_duration_minute': 1440,
              'min_trade_number': 10,
              'minimum_expectancy': 0.2,
              'minimum_winrate': 0.6,
              'process_throttle_secs': 3600,
              'remove_pumps': False,
              'stoploss_range_max': -0.1,
              'stoploss_range_min': -0.01,
              'stoploss_range_step': -0.01},
     'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                 'enabled': False},
                       'order_book_top': 1,
                       'price_last_balance': 0.0,
                       'price_side': 'same',
                       'use_order_book': True},
     'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                        'rateLimit': 200},
                  'ccxt_config': {'enableRatelimit': True},
                  'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                  'name': 'binance',
                  'pair_blacklist': ['BNB/.*'],
                  'pair_whitelist': ['BTC/USDT',
                                     'ETH/USDT',
                                     'BNB/USDT',
                                     'SOL/USDT',
                                     'LUNA/USDT',
                                     'AVAX/USDT',
                                     'DOGE/USDT',
                                     'DOT/USDT',
                                     'SHIB/USDT',
                                     'NEAR/USDT',
                                     'ATOM/USDT',
                                     'LINK/USDT',
                                     'FTT/USDT',
                                     'MANA/USDT',
                                     'VET/USDT',
                                     'EGLD/USDT',
                                     'SAND/USDT',
                                     'THETA/USDT',
                                     'FTM/USDT',
                                     'AXS/USDT',
                                     'RUNE/USDT',
                                     'CAKE/USDT',
                                     'HNT/USDT',
                                     'AAVE/USDT',
                                     'WAVES/USDT'],
                  'password': '',
                  'sandbox': False,
                  'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
     'exit_pricing': {'order_book_top': 1,
                      'price_side': 'same',
                      'use_order_book': True},
     'export': 'trades',
     'exportfilename': PosixPath('/freqtrade/user_data/backtest_results'),
     'fiat_display_currency': 'USD',
     'force_entry_enable': False,
     'ignore_buying_expired_candle_after': 0,
     'ignore_roi_if_buy_signal': False,
     'initial_state': 'running',
     'internals': {'process_throttle_secs': 5},
     'last_stake_amount_min_ratio': 0.5,
     'logfile': '/freqtrade/user_data/logs/freqtrade.log',
     'margin_mode': '',
     'max_entry_position_adjustment': -1,
     'max_open_trades': 10,
     'minimal_roi': {'0': 100},
     'new_pairs_days': 30,
     'order_time_in_force': {'buy': 'gtc', 'sell': 'gtc'},
     'order_types': {'buy': 'limit',
                     'emergencysell': 'market',
                     'sell': 'limit',
                     'stoploss': 'limit',
                     'stoploss_on_exchange': False,
                     'stoploss_on_exchange_interval': 60},
     'original_config': {'api_server': {'CORS_origins': [],
                                        'enabled': True,
                                        'jwt_secret_key': '1785e193fc32695fdeecc859b71c66a05073d10cabb613cadce985f2684e35b4',
                                        'listen_ip_address': '0.0.0.0',
                                        'listen_port': 8080,
                                        'password': 'pass',
                                        'username': 'user'},
                         'ask_strategy': {},
                         'bot_name': 'BotKeltnerRsi',
                         'cancel_open_orders_on_exit': False,
                         'config_files': ['/freqtrade/user_data/config.json'],
                         'dry_run': True,
                         'dry_run_wallet': 1000,
                         'edge': {'allowed_risk': 0.01,
                                  'calculate_since_number_of_days': 7,
                                  'enabled': False,
                                  'max_trade_duration_minute': 1440,
                                  'min_trade_number': 10,
                                  'minimum_expectancy': 0.2,
                                  'minimum_winrate': 0.6,
                                  'process_throttle_secs': 3600,
                                  'remove_pumps': False,
                                  'stoploss_range_max': -0.1,
                                  'stoploss_range_min': -0.01,
                                  'stoploss_range_step': -0.01},
                         'entry_pricing': {'check_depth_of_market': {'bids_to_ask_delta': 1,
                                                                     'enabled': False},
                                           'order_book_top': 1,
                                           'price_last_balance': 0.0,
                                           'price_side': 'same',
                                           'use_order_book': True},
                         'exchange': {'ccxt_async_config': {'enableRatelimit': True,
                                                            'rateLimit': 200},
                                      'ccxt_config': {'enableRatelimit': True},
                                      'key': 'vmyV9sLqsQFpx9sEkptWWOnfsMpxgkrB7FLoGIutERDe959PDsas1zsnFmQyVqtz',
                                      'name': 'binance',
                                      'pair_blacklist': ['BNB/.*'],
                                      'pair_whitelist': ['BTC/USDT',
                                                         'ETH/USDT',
                                                         'BNB/USDT',
                                                         'SOL/USDT',
                                                         'LUNA/USDT',
                                                         'AVAX/USDT',
                                                         'DOGE/USDT',
                                                         'DOT/USDT',
                                                         'SHIB/USDT',
                                                         'NEAR/USDT',
                                                         'ATOM/USDT',
                                                         'LINK/USDT',
                                                         'FTT/USDT',
                                                         'MANA/USDT',
                                                         'VET/USDT',
                                                         'EGLD/USDT',
                                                         'SAND/USDT',
                                                         'THETA/USDT',
                                                         'FTM/USDT',
                                                         'AXS/USDT',
                                                         'RUNE/USDT',
                                                         'CAKE/USDT',
                                                         'HNT/USDT',
                                                         'AAVE/USDT',
                                                         'WAVES/USDT'],
                                      'secret': 'D6EOlZQk95dVRHtgKOMsnUgcvhoOOEAD25q8zVsAqNNIt8EHQmQ1X95B08W8KfbB'},
                         'exit_pricing': {'order_book_top': 1,
                                          'price_side': 'same',
                                          'use_order_book': True},
                         'fiat_display_currency': 'USD',
                         'force_entry_enable': False,
                         'initial_state': 'running',
                         'internals': {'process_throttle_secs': 5},
                         'margin_mode': '',
                         'max_open_trades': 10,
                         'pairlists': [{'method': 'StaticPairList'}],
                         'stake_amount': 'unlimited',
                         'stake_currency': 'USDT',
                         'telegram': {'chat_id': '5115301231',
                                      'enabled': True,
                                      'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
                         'timeframe': '1d',
                         'tradable_balance_ratio': 0.98,
                         'trading_mode': 'spot',
                         'unfilledtimeout': {'entry': 10,
                                             'exit': 30,
                                             'exit_timeout_count': 0,
                                             'unit': 'minutes'}},
     'pairlists': [{'method': 'StaticPairList'}],
     'pairs': ['BTC/USDT',
               'ETH/USDT',
               'BNB/USDT',
               'SOL/USDT',
               'LUNA/USDT',
               'AVAX/USDT',
               'DOGE/USDT',
               'DOT/USDT',
               'SHIB/USDT',
               'NEAR/USDT',
               'ATOM/USDT',
               'LINK/USDT',
               'FTT/USDT',
               'MANA/USDT',
               'VET/USDT',
               'EGLD/USDT',
               'SAND/USDT',
               'THETA/USDT',
               'FTM/USDT',
               'AXS/USDT',
               'RUNE/USDT',
               'CAKE/USDT',
               'HNT/USDT',
               'AAVE/USDT',
               'WAVES/USDT'],
     'position_adjustment_enable': False,
     'print_colorized': True,
     'process_only_new_candles': False,
     'protections': [],
     'runmode': <RunMode.DRY_RUN: 'dry_run'>,
     'sell_profit_offset': 0.0,
     'sell_profit_only': False,
     'stake_amount': 'unlimited',
     'stake_currency': 'USDT',
     'startup_candle_count': 0,
     'stoploss': -0.254,
     'strategy': 'KeltnerRSI',
     'telegram': {'chat_id': '5115301231',
                  'enabled': True,
                  'notification_settings': {'buy_fill': 'off',
                                            'protection_trigger': 'off',
                                            'sell_fill': 'off'},
                  'token': '5317284831:AAFuBY8awKBZ4g36AKJqLlfcEV4PDiPhQS4'},
     'timeframe': '1d',
     'tradable_balance_ratio': 0.98,
     'trading_mode': 'spot',
     'trailing_only_offset_is_reached': False,
     'trailing_stop': False,
     'trailing_stop_positive_offset': 0.0,
     'unfilledtimeout': {'entry': 10,
                         'exit': 30,
                         'exit_timeout_count': 0,
                         'unit': 'minutes'},
     'use_custom_stoploss': False,
     'use_sell_signal': True,
     'user_data_dir': PosixPath('/freqtrade/user_data'),
     'verbosity': 0}
2022-04-29 18:23:59,513 - freqtrade.commands.trade_commands - ERROR - 'bid_strategy' is a required property
2022-04-29 18:23:59,513 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 61, in __init__
    validate_config_consistency(config)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 86, in validate_config_consistency
    validate_config_schema(conf)
  File "/freqtrade/freqtrade/configuration/config_validation.py", line 61, in validate_config_schema
    raise ValidationError(
jsonschema.exceptions.ValidationError: 'bid_strategy' is a required property
2022-04-29 18:27:50,413 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:27:50,413 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:27:50,414 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:27:50,414 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:27:50,430 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:27:50,431 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:27:50,431 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:27:50,449 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:27:50,449 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 18:27:50,449 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 18:27:50,450 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:27:50,501 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:27:50,501 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:27:50,502 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 18:27:50,503 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:27:50,504 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:27:50,505 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:27:50,506 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:27:50,506 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 18:27:50,511 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 18:27:50,525 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 18:27:50,539 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 18:27:52,115 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 18:27:53,053 - freqtrade.persistence.migrations - INFO - Running database migration for trades - backup: trades_bak0, orders_bak0
2022-04-29 18:27:54,029 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 18:27:54,030 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 18:27:54,588 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 18:27:54,713 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 18:27:55,508 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 18:27:55,508 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 18:27:56,145 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 18:27:56,146 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 18:27:56,166 - uvicorn.error - INFO - Started server process [1]
2022-04-29 18:27:56,167 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 18:27:56,167 - uvicorn.error - INFO - Application startup complete.
2022-04-29 18:27:56,168 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 18:27:56,180 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 18:27:56,264 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 18:27:56,265 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 18:27:57,001 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 18:27:57,002 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 18:27:57,323 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `5m`\n*Strategy:* `KeltnerRSI`"}
2022-04-29 18:27:57,643 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 18:28:06,213 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:29:06,261 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:30:07,280 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:31:07,327 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:32:07,380 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:32:25,005 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:32:25,006 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:32:25,023 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:32:25,024 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:32:25,025 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:32:25,043 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:32:25,044 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 18:32:25,044 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:32:25,096 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:32:25,096 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:32:25,097 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 18:32:25,098 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:32:25,099 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:32:25,100 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:32:25,101 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:32:25,101 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 18:32:25,106 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 18:32:25,121 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 18:32:25,136 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 18:32:27,623 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 18:32:27,671 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 18:32:27,671 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 18:32:28,217 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 18:32:28,339 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 18:32:29,178 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 18:32:29,179 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 18:32:29,842 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 18:32:29,843 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 18:32:29,862 - uvicorn.error - INFO - Started server process [1]
2022-04-29 18:32:29,862 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 18:32:29,863 - uvicorn.error - INFO - Application startup complete.
2022-04-29 18:32:29,863 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 18:32:29,941 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 18:32:30,033 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 18:32:30,034 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 18:32:30,740 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 18:32:30,741 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 18:32:31,070 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSI`"}
2022-04-29 18:32:31,408 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 18:32:39,950 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:33:40,001 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:34:40,048 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:35:40,095 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:38:12,671 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 18:38:12,671 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 18:38:12,671 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 18:38:12,671 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 18:38:12,672 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 18:38:12,672 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 18:38:12,689 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 18:38:12,690 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 18:38:12,691 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 18:38:12,708 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 18:38:12,708 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 18:38:12,709 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 18:38:12,709 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 18:38:12,709 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 18:38:12,709 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 18:38:12,761 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSI from '/freqtrade/user_data/strategies/KeltnerRSI.py'...
2022-04-29 18:38:12,761 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 18:38:12,761 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 18:38:12,762 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 18:38:12,762 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 18:38:12,762 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 18:38:12,763 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 18:38:12,764 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 18:38:12,765 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 18:38:12,766 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 18:38:12,766 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 18:38:12,770 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 18:38:12,771 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 18:38:12,771 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 18:38:12,785 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 18:38:12,799 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 18:38:14,109 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 18:38:14,153 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 18:38:14,154 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 18:38:14,721 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 18:38:14,842 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 18:38:15,643 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 18:38:15,644 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 18:38:16,247 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 18:38:16,247 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 18:38:16,248 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 18:38:16,248 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 18:38:16,270 - uvicorn.error - INFO - Started server process [1]
2022-04-29 18:38:16,270 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 18:38:16,270 - uvicorn.error - INFO - Application startup complete.
2022-04-29 18:38:16,271 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 18:38:16,279 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 18:38:16,361 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 18:38:16,361 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 18:38:17,094 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 18:38:17,094 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 18:38:17,419 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSI`"}
2022-04-29 18:38:17,791 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 18:38:20,009 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:20,009 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:25,894 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:25,896 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:26,323 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:38:33,003 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:33,004 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:39,008 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:39,008 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:47,817 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:38:47,818 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:00,841 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:00,841 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:20,214 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:20,214 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:26,371 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:39:49,067 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:39:49,067 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:40:26,422 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:40:32,218 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:40:32,218 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:41:15,066 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:41:15,067 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:41:26,479 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:41:49,440 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:41:49,440 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:42:23,839 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:42:23,840 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:42:26,534 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:42:58,238 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:42:58,239 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:43:26,592 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:43:32,634 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:43:32,635 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:44:07,025 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:44:07,026 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:44:26,649 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:44:41,391 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:44:41,392 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:45:15,806 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:45:15,806 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:45:26,706 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:45:50,204 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:45:50,204 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:46:24,619 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:46:24,619 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:46:26,759 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:46:59,021 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:46:59,021 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:47:26,817 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:47:33,434 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:47:33,434 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:48:07,837 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:48:07,838 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:48:26,871 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:48:42,232 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:48:42,232 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:49:16,628 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:49:16,628 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:49:26,926 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:49:51,016 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:49:51,016 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:50:25,416 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:50:25,417 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:50:26,979 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:50:59,811 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:50:59,812 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:51:27,023 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:51:34,199 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:51:34,199 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:52:08,594 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:52:08,594 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:52:27,071 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:52:42,986 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:52:42,987 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:53:17,372 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:53:17,374 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:53:27,123 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:53:51,779 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:53:51,779 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:54:26,165 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:54:26,165 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:54:27,175 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:55:00,563 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:55:00,564 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:55:27,233 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:55:34,957 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:55:34,958 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:56:09,361 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:56:09,365 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:56:27,286 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:56:43,770 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:56:43,771 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:57:18,164 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:57:18,165 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:57:27,339 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:57:52,559 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:57:52,561 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:58:26,949 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:58:26,950 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:58:27,396 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:59:01,353 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:59:01,353 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:59:27,453 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 18:59:35,733 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 18:59:35,733 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:00:10,129 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:00:10,129 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:00:27,511 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:00:44,501 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:00:44,501 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:01:19,452 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:01:19,452 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:01:27,567 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:01:53,850 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:01:53,851 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:02:27,611 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:02:28,237 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:02:28,238 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:18,487 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:03:18,487 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:03:18,488 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:03:18,488 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:03:18,488 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:03:18,488 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:03:18,505 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:03:18,506 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:03:18,507 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:03:18,526 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:03:18,526 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:03:18,526 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:03:18,526 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:03:18,526 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:03:18,526 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:03:18,580 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSIdos from '/freqtrade/user_data/strategies/KeltnerRSIdos.py'...
2022-04-29 19:03:18,580 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 19:03:18,581 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 19:03:18,581 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): atrs_range = 1
2022-04-29 19:03:18,581 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 61
2022-04-29 19:03:18,581 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): window_range = 16
2022-04-29 19:03:18,581 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 19:03:18,582 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 19:03:18,582 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 19:03:18,582 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 19:03:18,582 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 19:03:18,582 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 19:03:18,583 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 19:03:18,584 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 19:03:18,585 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 19:03:18,585 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 19:03:18,590 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 19:03:18,590 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 19:03:18,590 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 19:03:18,605 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 19:03:18,619 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 19:03:21,784 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 19:03:21,839 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 19:03:21,839 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 19:03:22,418 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 19:03:22,546 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 19:03:23,306 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 19:03:23,307 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 19:03:23,943 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 19:03:23,943 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 19:03:23,943 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 19:03:23,943 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 19:03:23,966 - uvicorn.error - INFO - Started server process [1]
2022-04-29 19:03:23,967 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 19:03:23,967 - uvicorn.error - INFO - Application startup complete.
2022-04-29 19:03:23,967 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 19:03:23,976 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 19:03:24,061 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 19:03:24,062 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:03:24,790 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 19:03:24,790 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:03:25,112 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 19:03:25,444 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:03:27,659 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:27,659 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:33,528 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:33,532 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:33,597 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:03:40,673 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:40,674 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:46,662 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:46,662 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:55,451 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:03:55,451 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:08,472 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:08,473 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:28,872 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:28,873 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:33,644 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:04:57,730 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:04:57,731 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:05:33,695 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:05:40,838 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:05:40,839 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:06:23,682 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:06:23,683 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:06:33,743 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:06:58,102 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:06:58,103 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:07:32,485 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:07:32,486 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:07:33,788 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:08:06,879 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:08:06,880 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:08:33,835 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:08:41,262 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:08:41,263 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:15,620 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:15,621 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:33,884 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:09:50,011 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:50,012 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:54,976 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:09:54,977 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:00,849 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:00,849 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:07,984 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:07,984 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:14,825 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:14,826 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:23,650 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:23,650 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:33,938 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:10:35,661 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:35,662 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:55,048 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:10:55,049 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:11:16,208 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:11:16,209 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:11:33,987 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:11:45,551 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:11:45,552 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:12:28,960 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:12:28,961 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:12:34,035 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:13:03,871 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:13:03,872 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:13:34,083 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:13:38,785 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:13:38,786 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:14:13,872 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:14:13,873 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:14:34,131 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:14:48,782 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:14:48,783 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:15:23,671 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:15:23,672 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:15:34,179 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:15:58,567 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:15:58,568 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:31,972 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:31,973 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:16:34,224 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:17:05,483 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:05,484 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:34,275 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:17:42,026 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:17:42,026 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:18,828 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:18,829 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:34,323 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:18:53,030 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:18:53,031 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:27,042 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:27,042 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:19:34,367 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:20:01,168 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:01,168 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:34,419 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:20:35,171 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:20:35,171 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:10,277 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:10,277 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:34,463 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:21:45,175 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:21:45,176 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:20,187 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:20,188 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:26,836 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:26,837 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:32,111 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:32,112 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:34,520 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:22:38,747 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:38,748 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:45,458 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:45,458 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:55,012 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:22:55,012 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:06,224 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:06,224 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:21,251 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:21,252 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:34,575 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:23:42,680 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:23:42,681 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:16,939 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:16,940 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:24:34,623 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:25:00,271 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:00,272 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:34,655 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:34,655 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:25:34,671 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:26:07,902 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:07,902 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:34,719 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:26:42,274 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:26:42,274 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:15,519 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:15,519 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:34,768 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:27:49,930 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:27:49,932 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:24,364 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:24,365 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:34,815 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:28:58,766 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:28:58,767 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:33,179 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:33,180 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:29:34,863 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:30:06,646 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:06,647 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:34,915 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:30:40,197 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:30:40,198 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:14,946 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:14,947 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'stopped'}
2022-04-29 19:31:14,947 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:15,259 - freqtrade.worker - INFO - Changing state from RUNNING to: STOPPED
2022-04-29 19:31:20,263 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:31:58,781 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:31:58,781 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:20,312 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:32:33,810 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:32:33,810 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:09,450 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:09,451 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:20,373 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:33:45,128 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:33:45,128 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:20,427 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:34:20,825 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:34:20,825 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:01,841 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:01,842 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:20,471 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:35:49,350 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:35:49,350 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:20,515 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:36:23,509 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:23,509 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:57,874 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:36:57,874 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:37:20,568 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:37:32,272 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:37:32,272 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:07,236 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:07,236 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:20,620 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:38:41,616 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:38:41,616 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:15,993 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:15,993 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:20,672 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:39:50,387 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:39:50,387 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:20,722 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:40:24,776 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:24,776 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:59,167 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:40:59,167 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:41:20,779 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:41:33,630 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:41:33,630 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:08,025 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:08,025 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:20,827 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:42:42,431 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:42:42,431 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:16,808 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:16,809 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:20,879 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:43:51,971 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:43:51,972 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:20,930 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:44:25,364 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:25,365 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:59,579 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:44:59,580 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:45:20,975 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:45:34,139 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:45:34,140 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:07,800 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:07,800 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:21,027 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 19:46:41,043 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:46:41,740 - freqtrade.worker - INFO - Changing state from STOPPED to: RUNNING
2022-04-29 19:46:41,741 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:46:41,770 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:41,770 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:46:42,060 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 19:46:42,378 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:46:47,687 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:47:15,408 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:15,408 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:47,733 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:47:49,370 - telegram.ext.updater - ERROR - Error while getting Updates: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:47:49,371 - telegram.ext.dispatcher - ERROR - No error handlers are registered, logging exception.
Traceback (most recent call last):
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 646, in _network_loop_retry
    if not action_cb():
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/updater.py", line 597, in polling_action_cb
    updates = self.bot.get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/ext/extbot.py", line 224, in get_updates
    updates = super().get_updates(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 130, in decorator
    result = func(*args, **kwargs)
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 3054, in get_updates
    self._post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/bot.py", line 295, in _post
    return self.request.post(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 361, in post
    result = self._request_wrapper(
  File "/home/ftuser/.local/lib/python3.9/site-packages/telegram/utils/request.py", line 283, in _request_wrapper
    raise Conflict(message)
telegram.error.Conflict: Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
2022-04-29 19:49:24,637 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 19:49:24,637 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 19:49:24,638 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 19:49:24,638 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 19:49:24,638 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 19:49:24,638 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 19:49:24,839 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 19:49:24,840 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 19:49:24,840 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 19:49:24,858 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 19:49:24,858 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 19:49:24,858 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 19:49:24,858 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 19:49:24,859 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 19:49:24,859 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 19:49:25,043 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSIdos from '/freqtrade/user_data/strategies/KeltnerRSIdos.py'...
2022-04-29 19:49:25,044 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 19:49:25,044 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 19:49:25,044 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): atrs_range = 1
2022-04-29 19:49:25,044 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 61
2022-04-29 19:49:25,045 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): window_range = 16
2022-04-29 19:49:25,045 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 19:49:25,045 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 19:49:25,046 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 19:49:25,047 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 19:49:25,048 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 19:49:25,049 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 19:49:25,050 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 19:49:25,050 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 19:49:25,050 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 19:49:25,050 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 19:49:25,050 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 19:49:25,050 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 19:49:25,059 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 19:49:25,059 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 19:49:25,059 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 19:49:25,077 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 19:49:25,093 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 19:49:26,366 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 19:49:26,444 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 19:49:26,445 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 19:49:26,957 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 19:49:28,210 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 19:49:28,957 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 19:49:28,958 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 19:49:29,849 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 19:49:29,849 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 19:49:29,849 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 19:49:29,849 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 19:49:29,867 - uvicorn.error - INFO - Started server process [1]
2022-04-29 19:49:29,867 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 19:49:29,868 - uvicorn.error - INFO - Application startup complete.
2022-04-29 19:49:29,868 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 19:49:29,877 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 19:49:29,962 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 19:49:29,962 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 19:49:30,648 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 19:49:30,648 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 19:49:30,971 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 19:49:31,289 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 19:49:40,224 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:50:40,271 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:51:40,323 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:52:40,371 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:53:40,421 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:54:40,473 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:55:40,522 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:56:40,575 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:57:40,623 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:58:40,671 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 19:59:40,719 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:00:40,771 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:01:40,820 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:02:40,871 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:03:40,919 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:04:40,963 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:05:41,008 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:06:41,063 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:07:41,113 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:08:41,170 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:09:41,219 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:10:41,263 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:11:41,318 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:12:41,375 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:13:41,427 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:14:41,479 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:15:41,532 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:16:41,578 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:17:41,631 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:18:41,687 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:19:41,735 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:20:41,783 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:21:41,831 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:22:41,875 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:23:41,923 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:26:30,415 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 20:26:30,437 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 20:26:30,437 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 20:26:30,438 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 20:26:30,438 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 20:26:30,438 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 20:26:32,859 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 20:26:32,860 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 20:26:32,861 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 20:26:32,878 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 20:26:32,878 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 20:26:32,879 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 20:26:32,879 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 20:26:32,879 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 20:26:32,879 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 20:26:34,880 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSIdos from '/freqtrade/user_data/strategies/KeltnerRSIdos.py'...
2022-04-29 20:26:34,880 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 20:26:34,880 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 20:26:34,880 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): atrs_range = 1
2022-04-29 20:26:34,881 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 61
2022-04-29 20:26:34,881 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): window_range = 16
2022-04-29 20:26:34,881 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 20:26:34,881 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 20:26:34,881 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 20:26:34,882 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 20:26:34,883 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 20:26:34,884 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 20:26:34,885 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 20:26:34,885 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 20:26:34,890 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 20:26:34,890 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 20:26:34,890 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 20:26:34,906 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 20:26:34,920 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 20:26:36,893 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 20:26:37,608 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 20:26:37,608 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 20:26:38,227 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 20:26:46,338 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 20:26:47,107 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 20:26:47,108 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 20:27:04,413 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 20:27:04,413 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 20:27:04,413 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 20:27:04,413 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 20:27:05,136 - uvicorn.error - INFO - Started server process [1]
2022-04-29 20:27:05,136 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 20:27:05,137 - uvicorn.error - INFO - Application startup complete.
2022-04-29 20:27:05,137 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 20:27:05,254 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 20:27:05,353 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 20:27:05,354 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 20:27:06,085 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 20:27:06,085 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 20:27:06,411 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 20:27:06,756 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 20:27:15,716 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:28:15,763 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:29:15,811 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:30:15,859 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:31:15,907 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:32:15,955 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:33:16,001 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:34:16,047 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:35:16,099 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:36:16,143 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:37:16,191 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:38:16,239 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:39:16,287 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:42:22,286 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 20:42:22,331 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 20:42:22,331 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 20:42:22,331 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 20:42:22,331 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 20:42:22,332 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 20:42:23,766 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 20:42:23,767 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 20:42:23,767 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 20:42:23,788 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 20:42:23,789 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 20:42:23,789 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 20:42:23,789 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 20:42:23,789 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 20:42:23,789 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 20:42:24,888 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSIdos from '/freqtrade/user_data/strategies/KeltnerRSIdos.py'...
2022-04-29 20:42:24,888 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 20:42:24,888 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 20:42:24,889 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): atrs_range = 1
2022-04-29 20:42:24,889 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 61
2022-04-29 20:42:24,889 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): window_range = 16
2022-04-29 20:42:24,889 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 20:42:24,889 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 20:42:24,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 20:42:24,891 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 20:42:24,892 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 20:42:24,893 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 20:42:24,893 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 20:42:24,893 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 20:42:24,893 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 20:42:24,893 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 20:42:24,898 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 20:42:24,898 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 20:42:24,898 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 20:42:24,913 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 20:42:24,927 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 20:42:26,699 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 20:42:26,858 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 20:42:26,858 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 20:42:27,328 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 20:42:30,012 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 20:42:30,805 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 20:42:30,806 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 20:42:34,611 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 20:42:34,611 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 20:42:34,611 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 20:42:34,611 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 20:42:34,916 - uvicorn.error - INFO - Started server process [1]
2022-04-29 20:42:34,917 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 20:42:34,917 - uvicorn.error - INFO - Application startup complete.
2022-04-29 20:42:34,918 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 20:42:34,973 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 20:42:35,061 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 20:42:35,061 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 20:42:35,822 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 20:42:35,822 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 20:42:36,154 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 20:42:36,493 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 20:42:45,852 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:43:45,897 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:44:45,947 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:45:45,996 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:46:46,040 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:47:46,087 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:48:46,135 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:49:46,183 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:50:46,227 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:51:46,275 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:52:46,325 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:53:46,376 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:54:46,424 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:55:46,475 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:56:46,527 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:57:46,575 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:58:46,624 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 20:59:46,671 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:00:46,719 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:01:46,764 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:02:46,815 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:03:46,863 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:04:46,911 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:05:46,959 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:06:47,007 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:07:47,056 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:08:47,103 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:09:47,159 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:10:47,207 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:11:47,255 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:12:47,299 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:13:47,347 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:14:47,400 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:15:47,444 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:16:54,107 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:16:54,107 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:16:54,107 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:16:54,108 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:16:54,108 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:16:54,108 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:16:54,125 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:16:54,126 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:16:54,126 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:16:54,144 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:16:54,145 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:16:54,145 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:16:54,145 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:16:54,145 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:16:54,145 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:16:54,164 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:16:54,164 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:16:54,164 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:16:59,531 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:16:59,532 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:16:59,532 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:16:59,532 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:16:59,532 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:16:59,532 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:16:59,549 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:16:59,550 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:16:59,550 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:16:59,568 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:16:59,568 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:16:59,568 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:16:59,568 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:16:59,569 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:16:59,569 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:16:59,589 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:16:59,589 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:16:59,590 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:05,474 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:05,474 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:05,474 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:05,474 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:05,475 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:05,475 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:05,494 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:05,494 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:05,495 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:05,513 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:05,513 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:05,514 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:05,514 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:05,514 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:05,514 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:05,533 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:05,533 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:05,533 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:10,685 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:10,686 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:10,686 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:10,686 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:10,686 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:10,686 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:10,703 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:10,704 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:10,704 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:10,723 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:10,723 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:10,723 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:10,723 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:10,723 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:10,723 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:10,742 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:10,742 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:10,742 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:15,896 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:15,897 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:15,897 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:15,897 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:15,897 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:15,897 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:15,914 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:15,915 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:15,915 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:15,932 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:15,932 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:15,932 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:15,932 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:15,932 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:15,933 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:15,952 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:15,952 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:15,953 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:21,628 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:21,628 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:21,628 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:21,628 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:21,629 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:21,629 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:21,647 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:21,648 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:21,648 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:21,668 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:21,668 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:21,669 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:21,669 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:21,669 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:21,669 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:21,687 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:21,688 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:21,688 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:28,906 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:28,906 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:28,906 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:28,906 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:28,907 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:28,907 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:28,926 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:28,927 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:28,927 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:28,945 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:28,945 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:28,946 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:28,946 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:28,946 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:28,946 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:28,964 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:28,964 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:28,965 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:39,558 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:39,558 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:39,558 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:39,559 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:39,559 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:39,559 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:39,577 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:39,578 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:39,578 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:39,596 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:39,596 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:39,596 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:39,597 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:39,597 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:39,597 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:39,617 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:39,617 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:39,617 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:56,626 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:17:56,626 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:17:56,627 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:17:56,627 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:17:56,627 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:17:56,627 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:17:56,644 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:17:56,645 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:17:56,645 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:17:56,664 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:17:56,664 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:17:56,664 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:17:56,664 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:17:56,665 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:17:56,665 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:17:56,683 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:17:56,683 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:17:56,684 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:18:26,265 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:18:26,265 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:18:26,265 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:18:26,265 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:18:26,265 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:18:26,266 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:18:26,287 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:18:26,287 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:18:26,288 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:18:26,305 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:18:26,305 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:18:26,305 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:18:26,305 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:18:26,305 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:18:26,305 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:18:26,325 - freqtrade.resolvers.iresolver - WARNING - Could not import /freqtrade/user_data/strategies/KeltnerRSIdos.py due to 'unexpected indent (KeltnerRSIdos.py, line 26)'
2022-04-29 21:18:26,325 - freqtrade.commands.trade_commands - ERROR - Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:18:26,325 - freqtrade.commands.trade_commands - ERROR - Fatal exception!
Traceback (most recent call last):
  File "/freqtrade/freqtrade/commands/trade_commands.py", line 18, in start_trading
    worker = Worker(args)
  File "/freqtrade/freqtrade/worker.py", line 35, in __init__
    self._init(False)
  File "/freqtrade/freqtrade/worker.py", line 52, in _init
    self.freqtrade = FreqtradeBot(self._config)
  File "/freqtrade/freqtrade/freqtradebot.py", line 58, in __init__
    self.strategy: IStrategy = StrategyResolver.load_strategy(self.config)
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 44, in load_strategy
    strategy: IStrategy = StrategyResolver._load_strategy(
  File "/freqtrade/freqtrade/resolvers/strategy_resolver.py", line 206, in _load_strategy
    raise OperationalException(
freqtrade.exceptions.OperationalException: Impossible to load Strategy 'KeltnerRSIdos'. This class does not exist or contains Python code errors.
2022-04-29 21:19:34,548 - freqtrade.loggers - INFO - Verbosity set to 0
2022-04-29 21:19:34,548 - freqtrade.configuration.configuration - INFO - Runmode set to dry_run.
2022-04-29 21:19:34,548 - freqtrade.configuration.configuration - INFO - Parameter --db-url detected ...
2022-04-29 21:19:34,548 - freqtrade.configuration.configuration - INFO - Dry run is enabled
2022-04-29 21:19:34,548 - freqtrade.configuration.configuration - INFO - Using DB: "sqlite:////freqtrade/user_data/tradesv3.sqlite"
2022-04-29 21:19:34,549 - freqtrade.configuration.configuration - INFO - Using max_open_trades: 10 ...
2022-04-29 21:19:34,569 - freqtrade.configuration.configuration - INFO - Using user-data directory: /freqtrade/user_data ...
2022-04-29 21:19:34,570 - freqtrade.configuration.configuration - INFO - Using data directory: /freqtrade/user_data/data/binance ...
2022-04-29 21:19:34,570 - freqtrade.configuration.check_exchange - INFO - Checking exchange...
2022-04-29 21:19:34,586 - freqtrade.configuration.check_exchange - INFO - Exchange "binance" is officially supported by the Freqtrade development team.
2022-04-29 21:19:34,586 - freqtrade.configuration.configuration - INFO - Using pairlist from configuration.
2022-04-29 21:19:34,587 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.use_sell_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `use_sell_signal` setting in your configuration instead.
2022-04-29 21:19:34,587 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.sell_profit_only` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `sell_profit_only` setting in your configuration instead.
2022-04-29 21:19:34,587 - freqtrade.configuration.deprecated_settings - WARNING - DEPRECATED: The `ask_strategy.ignore_roi_if_buy_signal` setting is deprecated and will be removed in the next versions of Freqtrade. Please use the `ignore_roi_if_buy_signal` setting in your configuration instead.
2022-04-29 21:19:34,587 - freqtrade.freqtradebot - INFO - Starting freqtrade 2022.3
2022-04-29 21:19:34,642 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy KeltnerRSIdos from '/freqtrade/user_data/strategies/KeltnerRSIdos.py'...
2022-04-29 21:19:34,642 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2022-04-29 21:19:34,642 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2022-04-29 21:19:34,642 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): atrs_range = 1
2022-04-29 21:19:34,643 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): rsi_buy_hline = 61
2022-04-29 21:19:34,643 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): window_range = 16
2022-04-29 21:19:34,643 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2022-04-29 21:19:34,643 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1d.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: USDT.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'buy': 10, 'sell': 30}.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_sell_signal' with value in config file: True.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'sell_profit_only' with value in config file: False.
2022-04-29 21:19:34,644 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_buy_signal' with value in config file: False.
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 100}
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1d
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.254
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: False
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'buy': 'limit', 'sell': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2022-04-29 21:19:34,645 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'buy': 'gtc', 'sell': 'gtc'}
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: USDT
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using protections: []
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 0
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'buy': 10, 'sell': 30}
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_sell_signal: True
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_only: False
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_buy_signal: False
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using sell_profit_offset: 0.0
2022-04-29 21:19:34,646 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2022-04-29 21:19:34,647 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2022-04-29 21:19:34,647 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2022-04-29 21:19:34,647 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2022-04-29 21:19:34,647 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2022-04-29 21:19:34,652 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2022-04-29 21:19:34,652 - freqtrade.exchange.exchange - INFO - Using CCXT 1.76.65
2022-04-29 21:19:34,652 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True}
2022-04-29 21:19:34,667 - freqtrade.exchange.exchange - INFO - Applying additional ccxt config: {'enableRateLimit': True, 'rateLimit': 200}
2022-04-29 21:19:34,681 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2022-04-29 21:19:37,593 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2022-04-29 21:19:37,641 - freqtrade.wallets - INFO - Wallets synced.
2022-04-29 21:19:37,641 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2022-04-29 21:19:38,169 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.telegram ...
2022-04-29 21:19:38,290 - apscheduler.scheduler - INFO - Scheduler started
2022-04-29 21:19:39,052 - freqtrade.rpc.telegram - INFO - rpc.telegram is listening for following commands: [['status'], ['profit'], ['balance'], ['start'], ['stop'], ['forcesell'], ['forcebuy'], ['trades'], ['delete'], ['performance'], ['buys'], ['sells'], ['mix_tags'], ['stats'], ['daily'], ['weekly'], ['monthly'], ['count'], ['locks'], ['unlock', 'delete_locks'], ['reload_config', 'reload_conf'], ['show_config', 'show_conf'], ['stopbuy'], ['whitelist'], ['blacklist'], ['blacklist_delete', 'bl_delete'], ['logs'], ['edge'], ['health'], ['help'], ['version']]
2022-04-29 21:19:39,052 - freqtrade.rpc.rpc_manager - INFO - Enabling rpc.api_server
2022-04-29 21:19:39,656 - freqtrade.rpc.api_server.webserver - INFO - Starting HTTP Server at 0.0.0.0:8080
2022-04-29 21:19:39,657 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - Local Rest Server listening to external connections
2022-04-29 21:19:39,657 - freqtrade.rpc.api_server.webserver - WARNING - SECURITY WARNING - This is insecure please set to your loopback,e.g 127.0.0.1 in config.json
2022-04-29 21:19:39,657 - freqtrade.rpc.api_server.webserver - INFO - Starting Local Rest Server.
2022-04-29 21:19:39,678 - uvicorn.error - INFO - Started server process [1]
2022-04-29 21:19:39,679 - uvicorn.error - INFO - Waiting for application startup.
2022-04-29 21:19:39,679 - uvicorn.error - INFO - Application startup complete.
2022-04-29 21:19:39,679 - uvicorn.error - INFO - Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
2022-04-29 21:19:39,691 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2022-04-29 21:19:39,773 - freqtrade.plugins.pairlistmanager - WARNING - Pair BNB/USDT in your blacklist. Removing it from whitelist...
2022-04-29 21:19:39,773 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 21:19:40,444 - freqtrade.worker - INFO - Changing state to: RUNNING
2022-04-29 21:19:40,444 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 21:19:40,757 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 21:19:41,075 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 21:19:50,266 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:20:50,312 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:21:50,360 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:22:50,410 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:23:35,443 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'stopped'}
2022-04-29 21:23:36,091 - freqtrade.worker - INFO - Changing state from RUNNING to: STOPPED
2022-04-29 21:23:41,099 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='STOPPED'
2022-04-29 21:23:56,113 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': status, 'status': 'running'}
2022-04-29 21:23:56,442 - freqtrade.worker - INFO - Changing state from STOPPED to: RUNNING
2022-04-29 21:23:56,442 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': warning, 'status': 'Dry run is enabled. All trades are simulated.'}
2022-04-29 21:23:56,756 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "*Exchange:* `binance`\n*Stake per trade:* `unlimited USDT`\n*Minimum ROI:* `{'0': 100}`\n*Stoploss:* `-0.254`\n*Position adjustment:* `Off`\n*Timeframe:* `1d`\n*Strategy:* `KeltnerRSIdos`"}
2022-04-29 21:23:57,078 - freqtrade.rpc.rpc_manager - INFO - Sending rpc message: {'type': startup, 'status': "Searching for USDT pairs to buy and sell based on [{'StaticPairList': 'StaticPairList'}]"}
2022-04-29 21:24:02,395 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:25:02,446 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:26:02,495 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:27:02,547 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:28:02,600 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:29:02,643 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:30:02,691 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:31:02,739 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:32:02,787 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:33:02,835 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
2022-04-29 21:34:02,884 - freqtrade.worker - INFO - Bot heartbeat. PID=1, version='2022.3', state='RUNNING'
